package com.lynxdeer.sieged;

import com.lynxdeer.sieged.items.CGive;
import com.lynxdeer.sieged.items.Weapons;
import com.lynxdeer.sieged.other.Chat;
import com.lynxdeer.sieged.other.Mining;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.entity.*;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.RecipeChoice;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.ShapelessRecipe;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.util.Vector;

import java.awt.*;
import java.util.ArrayList;
import java.util.Objects;

import static com.lynxdeer.sieged.items.Items.getItem;
import static com.lynxdeer.sieged.items.Items.getMaterial;
import static com.lynxdeer.sieged.other.Recipes.getShapedRecipe;
import static org.bukkit.Bukkit.addRecipe;

public final class Sieged extends JavaPlugin implements Listener {


	private static Sieged plugin;

	@Override
	public void onEnable() {

		plugin = this;

		Objects.requireNonNull(this.getCommand("cgive")).setExecutor(new CGive());

		getServer().getPluginManager().registerEvents(this, this);
		getServer().getPluginManager().registerEvents(new Weapons(), this);
		getServer().getPluginManager().registerEvents(new Mining(), this);
		getServer().getPluginManager().registerEvents(new Chat(), this);


		/*
		* - Todo:
		*    The reason that recipes don't work is due to the fact that you need to put the
		*    recipe registering in onEnable() cause spigot dumb
		* */

		ArrayList<String> recipes = new ArrayList<>();
		recipes.add("woodenoak_spear");    recipes.add("woodenspruce_spear");recipes.add("woodenbirch_spear");
		recipes.add("woodenjungle_spear"); recipes.add("woodenacacia_spear");recipes.add("woodendark_oak_spear");
		recipes.add("woodencrimson_spear");recipes.add("woodenwarped_spear");recipes.add("stoneheaded_spear");
		recipes.add("stoneheadedblackstone_spear"); recipes.add("golden_spear"); recipes.add("iron_spear");
		recipes.add("diamond_spear"); recipes.add("pole"); recipes.add("metal_pole");

		for (String s : recipes) {

			ShapedRecipe recipe = new ShapedRecipe(new NamespacedKey(getPlugin(), s), getItem(s));
			String type = s.toLowerCase().replaceAll
					("_spear", "").replaceAll
					("_battleaxe", "");
			String weapon;
			weapon = s.toLowerCase().replaceAll(type + "_", "");
			if (s.toLowerCase().endsWith("spear") || s.toLowerCase().endsWith("battleaxe")) {
				switch (weapon) {
					case "battleaxe":
						recipe.shape("HHH", "HPH", " P ");
					case "spear":
						recipe.shape("  H", " P ", "P  ");
				}
				recipe.setIngredient('P', new RecipeChoice.ExactChoice(getMaterial("POLE")));
				if (s.startsWith("wooden")) {
					String woodmat = type.toUpperCase().replaceFirst("WOODEN", "") + "_PLANKS"; recipe.setIngredient('H', Material.valueOf(woodmat));}

				switch (type) {
					case "stoneheaded":
						recipe.setIngredient('H', Material.COBBLESTONE);
					case "stoneheadeddeepslate":
						recipe.setIngredient('H', Material.DEEPSLATE);
					case "stoneheadedblackstone":
						recipe.setIngredient('H', Material.BLACKSTONE);
					case "golden":
						recipe.setIngredient('H', Material.GOLD_INGOT);
					case "iron":
						recipe.setIngredient('H', Material.IRON_INGOT);
						recipe.setIngredient('P', new RecipeChoice.ExactChoice(getMaterial("METAL_POLE")));
						break;
					case "diamond":
						recipe.setIngredient('H', Material.DIAMOND);
						recipe.setIngredient('P', new RecipeChoice.ExactChoice(getMaterial("METAL_POLE")));
						break;
				}
			}

			if (s.toLowerCase().endsWith("pole")) {
				type = s.toLowerCase().replaceAll("pole", "");
				recipe.shape(" S ", " ST", " S ");
				switch (type) {
					case "":
						recipe.setIngredient('S', Material.STICK);
						recipe.setIngredient('T', Material.STRING);
					case "metal_":
						recipe.setIngredient('S', Material.IRON_INGOT);
						recipe.setIngredient('T', new RecipeChoice.ExactChoice(getMaterial("POLE")));
				}
			}
			System.out.println(s + " | " + type + " |" + String.join(":", recipe.getShape()) + "| " + weapon);
			addRecipe(recipe);

		}

		ShapedRecipe blazerod = new ShapedRecipe(new NamespacedKey(getPlugin(), "blazerod"), new ItemStack(Material.BLAZE_ROD));
		blazerod.shape(" G ", "FIF", "CPC");
		blazerod.setIngredient('G', Material.GUNPOWDER);
		blazerod.setIngredient('F', Material.FLINT);
		blazerod.setIngredient('I', Material.IRON_INGOT);
		blazerod.setIngredient('C', Material.COAL_BLOCK);
		blazerod.setIngredient('P', new RecipeChoice.ExactChoice(getMaterial("METAL_POLE")));
		addRecipe(blazerod);


		ShapelessRecipe diamond = new ShapelessRecipe(new NamespacedKey(getPlugin(), "diamond"), new ItemStack(Material.DIAMOND));
		diamond.addIngredient(new RecipeChoice.ExactChoice(getMaterial("DIAMOND_CHUNK")));
		diamond.addIngredient(new RecipeChoice.ExactChoice(getMaterial("DIAMOND_CHUNK")));
		diamond.addIngredient(new RecipeChoice.ExactChoice(getMaterial("DIAMOND_CHUNK")));
		diamond.addIngredient(new RecipeChoice.ExactChoice(getMaterial("DIAMOND_CHUNK")));
		addRecipe(diamond);


	}

	public static Sieged getPlugin() {return plugin;}

	public static boolean entityisproper(LivingEntity ent) {

		return !(ent instanceof Painting) && !(ent instanceof Boat) &&
				!(ent instanceof EnderCrystal) && !(ent instanceof Minecart) &&
				!(ent instanceof ItemFrame) && !(ent instanceof GlowItemFrame) &&
				!(ent instanceof Item) && !(ent instanceof SmallFireball) &&
				!(ent instanceof DragonFireball) && !(ent instanceof Arrow) &&
				!(ent instanceof ArmorStand) && !(ent instanceof Egg) && !(ent instanceof Snowball)
			;
	}

	@EventHandler
	public void onItemSwitch(PlayerItemHeldEvent event) {
		Player p = event.getPlayer();

		if (p.getInventory().getItem(event.getNewSlot()) == null) return;
		ItemStack tool = p.getInventory().getItem(event.getNewSlot());
		assert tool != null;
		if (p.getCooldown(tool.getType()) < 5) p.setCooldown(tool.getType(), 5);

	}

	public static ArrayList<LivingEntity> hitbox(Player p, Location loc) {

		ArrayList<LivingEntity> ret = new ArrayList<>();

		for (LivingEntity loopentity : p.getWorld().getLivingEntities()) {

			boolean a = false;

			if (loc.distance(loopentity.getEyeLocation()) < 0.9) a = true;
			if (loc.distance(loopentity.getLocation().add(new Vector(0, 1, 0))) < 0.9) a = true;
			if (loc.distance(loopentity.getLocation()) < 0.9) a = true;

			if (Sieged.entityisproper(loopentity) && loopentity != p) {
				if (a) ret.add(loopentity);
			}

		}

		return ret;

	}

}
